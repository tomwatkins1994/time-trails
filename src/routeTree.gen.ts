/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainRouteImport } from './routes/_main/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as MainPlacesIndexImport } from './routes/_main/places.index'
import { Route as MainPlacesIdImport } from './routes/_main/places.$id'

// Create/Update Routes

const MainRouteRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const MainPlacesIndexRoute = MainPlacesIndexImport.update({
  id: '/places/',
  path: '/places/',
  getParentRoute: () => MainRouteRoute,
} as any)

const MainPlacesIdRoute = MainPlacesIdImport.update({
  id: '/places/$id',
  path: '/places/$id',
  getParentRoute: () => MainRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainRouteImport
    }
    '/_main/places/$id': {
      id: '/_main/places/$id'
      path: '/places/$id'
      fullPath: '/places/$id'
      preLoaderRoute: typeof MainPlacesIdImport
      parentRoute: typeof MainRouteImport
    }
    '/_main/places/': {
      id: '/_main/places/'
      path: '/places'
      fullPath: '/places'
      preLoaderRoute: typeof MainPlacesIndexImport
      parentRoute: typeof MainRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface MainRouteRouteChildren {
  MainIndexRoute: typeof MainIndexRoute
  MainPlacesIdRoute: typeof MainPlacesIdRoute
  MainPlacesIndexRoute: typeof MainPlacesIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainIndexRoute: MainIndexRoute,
  MainPlacesIdRoute: MainPlacesIdRoute,
  MainPlacesIndexRoute: MainPlacesIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof MainRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof MainIndexRoute
  '/places/$id': typeof MainPlacesIdRoute
  '/places': typeof MainPlacesIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof MainIndexRoute
  '/places/$id': typeof MainPlacesIdRoute
  '/places': typeof MainPlacesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_main': typeof MainRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_main/': typeof MainIndexRoute
  '/_main/places/$id': typeof MainPlacesIdRoute
  '/_main/places/': typeof MainPlacesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/register' | '/' | '/places/$id' | '/places'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/register' | '/' | '/places/$id' | '/places'
  id:
    | '__root__'
    | '/_auth'
    | '/_main'
    | '/_auth/login'
    | '/_auth/register'
    | '/_main/'
    | '/_main/places/$id'
    | '/_main/places/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  MainRouteRoute: typeof MainRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  MainRouteRoute: MainRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_main"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_main": {
      "filePath": "_main/route.tsx",
      "children": [
        "/_main/",
        "/_main/places/$id",
        "/_main/places/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    },
    "/_main/places/$id": {
      "filePath": "_main/places.$id.tsx",
      "parent": "/_main"
    },
    "/_main/places/": {
      "filePath": "_main/places.index.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
