/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlacesImport } from './routes/places'
import { Route as IndexImport } from './routes/index'
import { Route as PlacesIdImport } from './routes/places.$id'

// Create/Update Routes

const PlacesRoute = PlacesImport.update({
  id: '/places',
  path: '/places',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlacesIdRoute = PlacesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => PlacesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/places': {
      id: '/places'
      path: '/places'
      fullPath: '/places'
      preLoaderRoute: typeof PlacesImport
      parentRoute: typeof rootRoute
    }
    '/places/$id': {
      id: '/places/$id'
      path: '/$id'
      fullPath: '/places/$id'
      preLoaderRoute: typeof PlacesIdImport
      parentRoute: typeof PlacesImport
    }
  }
}

// Create and export the route tree

interface PlacesRouteChildren {
  PlacesIdRoute: typeof PlacesIdRoute
}

const PlacesRouteChildren: PlacesRouteChildren = {
  PlacesIdRoute: PlacesIdRoute,
}

const PlacesRouteWithChildren =
  PlacesRoute._addFileChildren(PlacesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/places': typeof PlacesRouteWithChildren
  '/places/$id': typeof PlacesIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/places': typeof PlacesRouteWithChildren
  '/places/$id': typeof PlacesIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/places': typeof PlacesRouteWithChildren
  '/places/$id': typeof PlacesIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/places' | '/places/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/places' | '/places/$id'
  id: '__root__' | '/' | '/places' | '/places/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlacesRoute: typeof PlacesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlacesRoute: PlacesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/places"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/places": {
      "filePath": "places.tsx",
      "children": [
        "/places/$id"
      ]
    },
    "/places/$id": {
      "filePath": "places.$id.tsx",
      "parent": "/places"
    }
  }
}
ROUTE_MANIFEST_END */
