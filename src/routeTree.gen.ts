/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as mainIndexImport } from './routes/(main)/index'
import { Route as mainPlacesImport } from './routes/(main)/places'
import { Route as mainPlacesIdImport } from './routes/(main)/places.$id'

// Create/Update Routes

const mainIndexRoute = mainIndexImport.update({
  id: '/(main)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const mainPlacesRoute = mainPlacesImport.update({
  id: '/(main)/places',
  path: '/places',
  getParentRoute: () => rootRoute,
} as any)

const mainPlacesIdRoute = mainPlacesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => mainPlacesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(main)/places': {
      id: '/(main)/places'
      path: '/places'
      fullPath: '/places'
      preLoaderRoute: typeof mainPlacesImport
      parentRoute: typeof rootRoute
    }
    '/(main)/': {
      id: '/(main)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof mainIndexImport
      parentRoute: typeof rootRoute
    }
    '/(main)/places/$id': {
      id: '/(main)/places/$id'
      path: '/$id'
      fullPath: '/places/$id'
      preLoaderRoute: typeof mainPlacesIdImport
      parentRoute: typeof mainPlacesImport
    }
  }
}

// Create and export the route tree

interface mainPlacesRouteChildren {
  mainPlacesIdRoute: typeof mainPlacesIdRoute
}

const mainPlacesRouteChildren: mainPlacesRouteChildren = {
  mainPlacesIdRoute: mainPlacesIdRoute,
}

const mainPlacesRouteWithChildren = mainPlacesRoute._addFileChildren(
  mainPlacesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/places': typeof mainPlacesRouteWithChildren
  '/': typeof mainIndexRoute
  '/places/$id': typeof mainPlacesIdRoute
}

export interface FileRoutesByTo {
  '/places': typeof mainPlacesRouteWithChildren
  '/': typeof mainIndexRoute
  '/places/$id': typeof mainPlacesIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(main)/places': typeof mainPlacesRouteWithChildren
  '/(main)/': typeof mainIndexRoute
  '/(main)/places/$id': typeof mainPlacesIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/places' | '/' | '/places/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/places' | '/' | '/places/$id'
  id: '__root__' | '/(main)/places' | '/(main)/' | '/(main)/places/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  mainPlacesRoute: typeof mainPlacesRouteWithChildren
  mainIndexRoute: typeof mainIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  mainPlacesRoute: mainPlacesRouteWithChildren,
  mainIndexRoute: mainIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(main)/places",
        "/(main)/"
      ]
    },
    "/(main)/places": {
      "filePath": "(main)/places.tsx",
      "children": [
        "/(main)/places/$id"
      ]
    },
    "/(main)/": {
      "filePath": "(main)/index.tsx"
    },
    "/(main)/places/$id": {
      "filePath": "(main)/places.$id.tsx",
      "parent": "/(main)/places"
    }
  }
}
ROUTE_MANIFEST_END */
